diff --git a/dep/CMakeLists.txt b/dep/CMakeLists.txt
index a87f460ed9..4f49cc62f9 100644
--- a/dep/CMakeLists.txt
+++ b/dep/CMakeLists.txt
@@ -36,6 +36,8 @@ if(TOOLS)
   add_subdirectory(libmpq)
 endif()
 
+add_subdirectory(libsidecar)
+
 if(BUILD_TESTING)
   include(FetchContent)
   FetchContent_Declare(Catch2
diff --git a/dep/PackageList.txt b/dep/PackageList.txt
index e50d50ca93..8c88d5c70b 100644
--- a/dep/PackageList.txt
+++ b/dep/PackageList.txt
@@ -72,3 +72,5 @@ argon2
 catch2
   https://github.com/catchorg/Catch2
   Version: v2.13.0
+
+sidecar
diff --git a/dep/libsidecar/CMakeLists.txt b/dep/libsidecar/CMakeLists.txt
new file mode 100644
index 0000000000..2f9099f5c8
--- /dev/null
+++ b/dep/libsidecar/CMakeLists.txt
@@ -0,0 +1,17 @@
+file(GLOB sources include/*.h)
+
+add_library(sidecar SHARED IMPORTED ${sources})
+
+set_target_properties(sidecar
+  PROPERTIES
+    IMPORTED_LOCATION
+      ${CMAKE_CURRENT_SOURCE_DIR}/libsidecar.dylib
+    INTERFACE_INCLUDE_DIRECTORIES
+      ${CMAKE_CURRENT_SOURCE_DIR}/include
+    LINKER_LANGUAGE
+      CXX)
+
+set_target_properties(sidecar
+    PROPERTIES
+      FOLDER
+        "dep")
\ No newline at end of file
diff --git a/src/server/game/CMakeLists.txt b/src/server/game/CMakeLists.txt
index 53971feebf..021fab1654 100644
--- a/src/server/game/CMakeLists.txt
+++ b/src/server/game/CMakeLists.txt
@@ -53,7 +53,8 @@ target_link_libraries(game
     trinity-core-interface
     efsw
   PUBLIC
-    game-interface)
+    game-interface
+    sidecar)
 
 set_target_properties(game
     PROPERTIES
@@ -74,5 +75,6 @@ endif()
 
 # Generate precompiled header
 if(USE_COREPCH)
+  include_directories(${CMAKE_SOURCE_DIR}/dep/libsidecar/include/)
   add_cxx_pch(game ${PRIVATE_PCH_HEADER})
 endif()
diff --git a/src/server/game/Entities/Object/ObjectGuid.h b/src/server/game/Entities/Object/ObjectGuid.h
index 31996595d0..20c263f23a 100644
--- a/src/server/game/Entities/Object/ObjectGuid.h
+++ b/src/server/game/Entities/Object/ObjectGuid.h
@@ -28,6 +28,7 @@
 #include <type_traits>
 #include <vector>
 #include <unordered_set>
+#include "TC9Sidecar.h"
 
 enum TypeID
 {
@@ -299,6 +300,11 @@ public:
 
     ObjectGuid::LowType Generate() override
     {
+        if (high == HighGuid::Player)
+            return ObjectGuid::LowType(sToCloud9Sidecar->GenerateCharacterGuid());
+        if (high == HighGuid::Item)
+            return ObjectGuid::LowType(sToCloud9Sidecar->GenerateItemGuid());
+
         if (_nextGuid >= ObjectGuid::GetMaxCounter(high) - 1)
             HandleCounterOverflow(high);
 
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 444f00206f..ac474616e2 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -17761,7 +17761,7 @@ bool Player::LoadFromDB(ObjectGuid guid, CharacterDatabaseQueryHolder const& hol
     _LoadActions(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_ACTIONS));

     // unread mails and next delivery time, actual mails not loaded
-    _LoadMail(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_MAILS), holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_MAIL_ITEMS));
+//    _LoadMail(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_MAILS), holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_MAIL_ITEMS));

     m_social = sSocialMgr->LoadFromDB(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_SOCIAL_LIST), GetGUID());

diff --git a/src/server/game/Handlers/CharacterHandler.cpp b/src/server/game/Handlers/CharacterHandler.cpp
index f6e51d9aeb..fdbe90b726 100644
--- a/src/server/game/Handlers/CharacterHandler.cpp
+++ b/src/server/game/Handlers/CharacterHandler.cpp
@@ -125,13 +125,13 @@ bool LoginQueryHolder::Initialize()
     stmt->setUInt32(0, lowGuid);
     res &= SetPreparedQuery(PLAYER_LOGIN_QUERY_LOAD_ACTIONS, stmt);

-    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_MAIL);
-    stmt->setUInt32(0, lowGuid);
-    res &= SetPreparedQuery(PLAYER_LOGIN_QUERY_LOAD_MAILS, stmt);
-
-    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_MAILITEMS);
-    stmt->setUInt32(0, lowGuid);
-    res &= SetPreparedQuery(PLAYER_LOGIN_QUERY_LOAD_MAIL_ITEMS, stmt);
+//    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_MAIL);
+//    stmt->setUInt32(0, lowGuid);
+//    res &= SetPreparedQuery(PLAYER_LOGIN_QUERY_LOAD_MAILS, stmt);
+//
+//    stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_MAILITEMS);
+//    stmt->setUInt32(0, lowGuid);
+//    res &= SetPreparedQuery(PLAYER_LOGIN_QUERY_LOAD_MAIL_ITEMS, stmt);

     stmt = CharacterDatabase.GetPreparedStatement(CHAR_SEL_CHARACTER_SOCIALLIST);
     stmt->setUInt32(0, lowGuid);
@@ -713,12 +713,13 @@ void WorldSession::HandlePlayerLoginOpcode(WorldPacket& recvData)

     recvData >> playerGuid;

-    if (!IsLegitCharacterForAccount(playerGuid))
-    {
-        TC_LOG_ERROR("network", "Account (%u) can't login with that character (%s).", GetAccountId(), playerGuid.ToString().c_str());
-        KickPlayer("WorldSession::HandlePlayerLoginOpcode Trying to login with a character of another account");
-        return;
-    }
+//    if (!IsLegitCharacterForAccount(playerGuid))
+//    {
+//        ObjectGuid guid(HighGuid::Player, (uint32)(1));
+//        TC_LOG_ERROR("network", "Account (%u) can't login with that character (%s). %lld", GetAccountId(), playerGuid.ToString().c_str(), guid.GetRawValue());
+//        KickPlayer("WorldSession::HandlePlayerLoginOpcode Trying to login with a character of another account");
+//        return;
+//    }

     std::shared_ptr<LoginQueryHolder> holder = std::make_shared<LoginQueryHolder>(GetAccountId(), playerGuid);
     if (!holder->Initialize())
@@ -781,23 +782,23 @@ void WorldSession::HandlePlayerLogin(LoginQueryHolder const& holder)
         pCurrChar->SetInGuild(fields[0].GetUInt32());
         pCurrChar->SetRank(fields[1].GetUInt8());
     }
-    else if (pCurrChar->GetGuildId())                        // clear guild related fields in case wrong data about non existed membership
-    {
-        pCurrChar->SetInGuild(0);
-        pCurrChar->SetRank(0);
-    }
-
-    if (pCurrChar->GetGuildId() != 0)
-    {
-        if (Guild* guild = sGuildMgr->GetGuildById(pCurrChar->GetGuildId()))
-            guild->SendLoginInfo(this);
-        else
-        {
-            // remove wrong guild data
-            TC_LOG_ERROR("network", "Player %s %s marked as member of not existing guild (id: %u), removing guild membership for player.", pCurrChar->GetName().c_str(), pCurrChar->GetGUID().ToString().c_str(), pCurrChar->GetGuildId());
-            pCurrChar->SetInGuild(0);
-        }
-    }
+//    else if (pCurrChar->GetGuildId())                        // clear guild related fields in case wrong data about non existed membership
+//    {
+//        pCurrChar->SetInGuild(0);
+//        pCurrChar->SetRank(0);
+//    }
+
+//    if (pCurrChar->GetGuildId() != 0)
+//    {
+//        if (Guild* guild = sGuildMgr->GetGuildById(pCurrChar->GetGuildId()))
+//            guild->SendLoginInfo(this);
+//        else
+//        {
+//            // remove wrong guild data
+//            TC_LOG_ERROR("network", "Player %s %s marked as member of not existing guild (id: %u), removing guild membership for player.", pCurrChar->GetName().c_str(), pCurrChar->GetGUID().ToString().c_str(), pCurrChar->GetGuildId());
+//            pCurrChar->SetInGuild(0);
+//        }
+//    }

     WorldPacket data(SMSG_LEARNED_DANCE_MOVES, 4+4);
     data << uint32(0);
diff --git a/src/server/game/Server/Protocol/Opcodes.cpp b/src/server/game/Server/Protocol/Opcodes.cpp
index 0dff9c1ea9..31cfeac19d 100644
--- a/src/server/game/Server/Protocol/Opcodes.cpp
+++ b/src/server/game/Server/Protocol/Opcodes.cpp
@@ -1439,6 +1439,8 @@ void OpcodeTable::Initialize()
     /*0x51C*/ DEFINE_SERVER_OPCODE_HANDLER(SMSG_COMMENTATOR_SKIRMISH_QUEUE_RESULT1, STATUS_NEVER);
     /*0x51D*/ DEFINE_SERVER_OPCODE_HANDLER(SMSG_COMMENTATOR_SKIRMISH_QUEUE_RESULT2, STATUS_NEVER);
     /*0x51E*/ DEFINE_SERVER_OPCODE_HANDLER(SMSG_MULTIPLE_MOVES,   STATUS_NEVER);
+    /*0x51F*/ DEFINE_HANDLER(TC9_CMSG_PREPARE_FOR_REDIRECT,                STATUS_AUTHED,   PROCESS_THREADUNSAFE,      &WorldSession::HandleTC9PrepareForRedirect     );
+    /*0x520*/ DEFINE_SERVER_OPCODE_HANDLER(TC9_SMSG_READY_FOR_REDIRECT, STATUS_NEVER);

 #undef DEFINE_HANDLER

diff --git a/src/server/game/Server/Protocol/Opcodes.h b/src/server/game/Server/Protocol/Opcodes.h
index 38cc24128c..95f6022304 100644
--- a/src/server/game/Server/Protocol/Opcodes.h
+++ b/src/server/game/Server/Protocol/Opcodes.h
@@ -1337,7 +1337,9 @@ enum Opcodes : uint16
     SMSG_COMMENTATOR_SKIRMISH_QUEUE_RESULT1         = 0x51C,
     SMSG_COMMENTATOR_SKIRMISH_QUEUE_RESULT2         = 0x51D,
     SMSG_MULTIPLE_MOVES                             = 0x51E, // uncompressed version of SMSG_COMPRESSED_MOVES
-    NUM_MSG_TYPES                                   = 0x51F
+    TC9_CMSG_PREPARE_FOR_REDIRECT                   = 0x51F,
+    TC9_SMSG_READY_FOR_REDIRECT                     = 0x520,
+    NUM_MSG_TYPES                                   = 0x521
 };

 enum OpcodeMisc : uint16
diff --git a/src/server/game/Server/WorldSession.cpp b/src/server/game/Server/WorldSession.cpp
index 968e314989..3ee95600d0 100644
--- a/src/server/game/Server/WorldSession.cpp
+++ b/src/server/game/Server/WorldSession.cpp
@@ -1329,17 +1329,50 @@ void WorldSession::InitializeSessionCallback(CharacterDatabaseQueryHolder const&
     LoadAccountData(realmHolder.GetPreparedResult(AccountInfoQueryHolderPerRealm::GLOBAL_ACCOUNT_DATA), GLOBAL_CACHE_MASK);
     LoadTutorialsData(realmHolder.GetPreparedResult(AccountInfoQueryHolderPerRealm::TUTORIALS));

-    if (!m_inQueue)
-        SendAuthResponse(AUTH_OK, true);
-    else
-        SendAuthWaitQueue(0);
+    // if (!m_inQueue)
+    //     SendAuthResponse(AUTH_OK, true);
+    // else
+    //     SendAuthWaitQueue(0);

     SetInQueue(false);
     ResetTimeOutTime(false);

-    SendAddonsInfo();
-    SendClientCacheVersion(sWorld->getIntConfig(CONFIG_CLIENTCACHE_VERSION));
-    SendTutorialsData();
+    // SendAddonsInfo();
+    // SendClientCacheVersion(sWorld->getIntConfig(CONFIG_CLIENTCACHE_VERSION));
+    // SendTutorialsData();
+}
+
+void WorldSession::HandleTC9PrepareForRedirect(WorldPacket& /*recvData*/)
+{
+    Player *player = this->GetPlayer();
+    if (player == nullptr)
+    {
+        WorldPacket data(TC9_SMSG_READY_FOR_REDIRECT, 1);
+        data << uint8(1); // 1 - Failed.
+        SendPacket(&data);
+    }
+
+    TC_LOG_DEBUG("network", "Starting saving, AccountId = %d", GetAccountId());
+
+    CharacterDatabaseTransaction trans = CharacterDatabase.BeginTransaction();
+    player->SaveToDB(trans, false);
+    AddTransactionCallback(CharacterDatabase.AsyncCommitTransaction(trans)).AfterComplete([this](bool success)
+    {
+        WorldPacket data(TC9_SMSG_READY_FOR_REDIRECT, 1);
+        data << uint8(!success); // 0 - Success, 1 - Failed.
+        SendPacket(&data);
+
+        if (!success)
+        {
+            TC_LOG_DEBUG("network", "Failed to save player, AccountId = %d", GetAccountId());
+            return;
+        }
+
+        TC_LOG_DEBUG("network", "Saved, AccountId = %d", GetAccountId());
+
+        KickPlayer("HandlePrepareForRedirect client redirected");
+        LogoutPlayer(false);
+    });
 }

 rbac::RBACData* WorldSession::GetRBACData()
diff --git a/src/server/game/Server/WorldSession.h b/src/server/game/Server/WorldSession.h
index 8c2f073fa6..4330ed129e 100644
--- a/src/server/game/Server/WorldSession.h
+++ b/src/server/game/Server/WorldSession.h
@@ -625,6 +625,8 @@ class TC_GAME_API WorldSession
         void SendSetPlayerDeclinedNamesResult(DeclinedNameResult result, ObjectGuid guid);
         void SendBarberShopResult(BarberShopResult result);

+        void HandleTC9PrepareForRedirect(WorldPacket& recvData);
+
         // played time
         void HandlePlayedTime(WorldPackets::Character::PlayedTimeClient& packet);

diff --git a/src/server/game/Server/WorldSocket.cpp b/src/server/game/Server/WorldSocket.cpp
index 7de97d54a4..421d44f614 100644
--- a/src/server/game/Server/WorldSocket.cpp
+++ b/src/server/game/Server/WorldSocket.cpp
@@ -75,7 +75,7 @@ void WorldSocket::CheckIpCallback(PreparedQueryResult result)
     }

     AsyncRead();
-    HandleSendAuthSession();
+//    HandleSendAuthSession();
 }

 bool WorldSocket::Update()
@@ -475,7 +475,7 @@ void WorldSocket::HandleAuthSessionCallback(std::shared_ptr<AuthSession> authSes
     }

     // even if auth credentials are bad, try using the session key we have - client cannot read auth response error without it
-    _authCrypt.Init(account.SessionKey);
+//    _authCrypt.Init(account.SessionKey);

     // First reject the connection if packet contains invalid data or realm state doesn't allow logging in
     if (sWorld->IsClosed())
@@ -495,15 +495,15 @@ void WorldSocket::HandleAuthSessionCallback(std::shared_ptr<AuthSession> authSes
         return;
     }

-    // Must be done before WorldSession is created
-    bool wardenActive = sWorld->getBoolConfig(CONFIG_WARDEN_ENABLED);
-    if (wardenActive && account.OS != "Win" && account.OS != "OSX")
-    {
-        SendAuthResponseError(AUTH_REJECT);
-        TC_LOG_ERROR("network", "WorldSocket::HandleAuthSession: Client %s attempted to log in using invalid client OS (%s).", address.c_str(), account.OS.c_str());
-        DelayedCloseSocket();
-        return;
-    }
+//    // Must be done before WorldSession is created
+//    bool wardenActive = sWorld->getBoolConfig(CONFIG_WARDEN_ENABLED);
+//    if (wardenActive && account.OS != "Win" && account.OS != "OSX")
+//    {
+//        SendAuthResponseError(AUTH_REJECT);
+//        TC_LOG_ERROR("network", "WorldSocket::HandleAuthSession: Client %s attempted to log in using invalid client OS (%s).", address.c_str(), account.OS.c_str());
+//        DelayedCloseSocket();
+//        return;
+//    }

     // Check that Key and account name are the same on client and server
     uint8 t[4] = { 0x00,0x00,0x00,0x00 };
@@ -516,42 +516,42 @@ void WorldSocket::HandleAuthSessionCallback(std::shared_ptr<AuthSession> authSes
     sha.UpdateData(account.SessionKey);
     sha.Finalize();

-    if (sha.GetDigest() != authSession->Digest)
-    {
-        SendAuthResponseError(AUTH_FAILED);
-        TC_LOG_ERROR("network", "WorldSocket::HandleAuthSession: Authentication failed for account: %u ('%s') address: %s", account.Id, authSession->Account.c_str(), address.c_str());
-        DelayedCloseSocket();
-        return;
-    }
-
-    if (IpLocationRecord const* location = sIPLocation->GetLocationRecord(address))
-        _ipCountry = location->CountryCode;
-
-    ///- Re-check ip locking (same check as in auth).
-    if (account.IsLockedToIP)
-    {
-        if (account.LastIP != address)
-        {
-            SendAuthResponseError(AUTH_FAILED);
-            TC_LOG_DEBUG("network", "WorldSocket::HandleAuthSession: Sent Auth Response (Account IP differs. Original IP: %s, new IP: %s).", account.LastIP.c_str(), address.c_str());
-            // We could log on hook only instead of an additional db log, however action logger is config based. Better keep DB logging as well
-            sScriptMgr->OnFailedAccountLogin(account.Id);
-            DelayedCloseSocket();
-            return;
-        }
-    }
-    else if (!account.LockCountry.empty() && account.LockCountry != "00" && !_ipCountry.empty())
-    {
-        if (account.LockCountry != _ipCountry)
-        {
-            SendAuthResponseError(AUTH_FAILED);
-            TC_LOG_DEBUG("network", "WorldSocket::HandleAuthSession: Sent Auth Response (Account country differs. Original country: %s, new country: %s).", account.LockCountry.c_str(), _ipCountry.c_str());
-            // We could log on hook only instead of an additional db log, however action logger is config based. Better keep DB logging as well
-            sScriptMgr->OnFailedAccountLogin(account.Id);
-            DelayedCloseSocket();
-            return;
-        }
-    }
+//    if (sha.GetDigest() != authSession->Digest)
+//    {
+//        SendAuthResponseError(AUTH_FAILED);
+//        TC_LOG_ERROR("network", "WorldSocket::HandleAuthSession: Authentication failed for account: %u ('%s') address: %s", account.Id, authSession->Account.c_str(), address.c_str());
+//        DelayedCloseSocket();
+//        return;
+//    }
+
+//    if (IpLocationRecord const* location = sIPLocation->GetLocationRecord(address))
+//        _ipCountry = location->CountryCode;
+//
+//    ///- Re-check ip locking (same check as in auth).
+//    if (account.IsLockedToIP)
+//    {
+//        if (account.LastIP != address)
+//        {
+//            SendAuthResponseError(AUTH_FAILED);
+//            TC_LOG_DEBUG("network", "WorldSocket::HandleAuthSession: Sent Auth Response (Account IP differs. Original IP: %s, new IP: %s).", account.LastIP.c_str(), address.c_str());
+//            // We could log on hook only instead of an additional db log, however action logger is config based. Better keep DB logging as well
+//            sScriptMgr->OnFailedAccountLogin(account.Id);
+//            DelayedCloseSocket();
+//            return;
+//        }
+//    }
+//    else if (!account.LockCountry.empty() && account.LockCountry != "00" && !_ipCountry.empty())
+//    {
+//        if (account.LockCountry != _ipCountry)
+//        {
+//            SendAuthResponseError(AUTH_FAILED);
+//            TC_LOG_DEBUG("network", "WorldSocket::HandleAuthSession: Sent Auth Response (Account country differs. Original country: %s, new country: %s).", account.LockCountry.c_str(), _ipCountry.c_str());
+//            // We could log on hook only instead of an additional db log, however action logger is config based. Better keep DB logging as well
+//            sScriptMgr->OnFailedAccountLogin(account.Id);
+//            DelayedCloseSocket();
+//            return;
+//        }
+//    }

     int64 mutetime = account.MuteTime;
     //! Negative mutetime indicates amount of seconds to be muted effective on next login - which is now.
@@ -608,8 +608,8 @@ void WorldSocket::HandleAuthSessionCallback(std::shared_ptr<AuthSession> authSes
     _worldSession->ReadAddonsInfo(authSession->AddonInfo);

     // Initialize Warden system only if it is enabled by config
-    if (wardenActive)
-        _worldSession->InitWarden(account.SessionKey, account.OS);
+//    if (wardenActive)
+//        _worldSession->InitWarden(account.SessionKey, account.OS);

     _queryProcessor.AddCallback(_worldSession->LoadPermissionsAsync().WithPreparedCallback(std::bind(&WorldSocket::LoadSessionPermissionsCallback, this, std::placeholders::_1)));
     AsyncRead();
diff --git a/src/server/game/TC9Sidecar/TC9GrpcHandler.cpp b/src/server/game/TC9Sidecar/TC9GrpcHandler.cpp
new file mode 100644
index 0000000000..2f3a2c2f0e
--- /dev/null
+++ b/src/server/game/TC9Sidecar/TC9GrpcHandler.cpp
@@ -0,0 +1,239 @@
+#include "TC9GrpcHandler.h"
+#include "ObjectAccessor.h"
+#include "Item.h"
+#include "Bag.h"
+
+GetPlayerItemsByGuidsResponse ToCloud9GrpcHandler::GetPlayerItemsByGuids(uint64 playerGuid, uint64* items, int itemsLen)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(playerGuid));
+    if (player == nullptr)
+    {
+        GetPlayerItemsByGuidsResponse resp;
+        resp.errorCode = PlayerItemErrorCodePlayerNotFound;
+        return resp;
+    }
+
+    int itemsFound = 0;
+    Item* foundItems[itemsLen];
+    for (int i = 0; i < itemsLen; i++)
+    {
+        foundItems[i] = player->GetItemByGuid(ObjectGuid(items[i]));
+        if (foundItems[i] != nullptr)
+            itemsFound++;
+    }
+
+    // Don't forget to delete on "that" side.
+    PlayerItem* itemsResult = (PlayerItem*)malloc(sizeof(PlayerItem) * itemsFound);
+    int itemsResultsItr = 0;
+    for (int i = 0; i < itemsLen; i++)
+    {
+        if (foundItems[i] == nullptr)
+            continue;
+
+        Item* pItem = foundItems[i];
+
+        PlayerItem item;
+        item.guid = pItem->GetGUID().GetRawValue();
+        item.entry = pItem->GetEntry();
+        item.owner = playerGuid;
+        item.bagSlot = pItem->GetBagSlot();
+        item.slot = pItem->GetSlot();
+        item.isTradable = pItem->CanBeTraded(true);
+        item.count = pItem->GetCount();
+        item.flags = pItem->GetUInt32Value(ITEM_FIELD_FLAGS);
+        item.durability = pItem->GetUInt32Value(ITEM_FIELD_DURABILITY);
+        item.randomPropertyID = pItem->GetItemRandomPropertyId();
+
+        // Don't forget to delete on "that" side.
+        char *text = (char*)malloc(sizeof(char) * (pItem->GetText().length() + 1));
+        strcpy(text, pItem->GetText().c_str());
+        item.text = text;
+
+        itemsResult[itemsResultsItr] = item;
+
+        itemsResultsItr++;
+    }
+
+    GetPlayerItemsByGuidsResponse resp;
+    resp.errorCode = PlayerItemErrorCodeNoError;
+    resp.items = itemsResult;
+    resp.itemsSize = itemsFound;
+    return resp;
+}
+
+
+RemoveItemsWithGuidsFromPlayerResponse ToCloud9GrpcHandler::RemoveItemsWithGuidsFromPlayer(uint64 playerGuid, uint64* items, int itemsLen, uint64 assignToPlayerGuid)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(playerGuid));
+    if (player == nullptr)
+    {
+        RemoveItemsWithGuidsFromPlayerResponse resp;
+        resp.errorCode = PlayerItemErrorCodePlayerNotFound;
+        return resp;
+    }
+
+    CharacterDatabaseTransaction trans = CharacterDatabase.BeginTransaction();
+
+    int itemsFound = 0;
+    uint64 deletedItems[itemsLen];
+    for (int i = 0; i < itemsLen; i++)
+    {
+        Item *item = player->GetItemByGuid(ObjectGuid(items[i]));
+        if (item == nullptr)
+        {
+            deletedItems[i] = 0;
+            continue;
+        }
+
+        itemsFound++;
+        deletedItems[i] = item->GetGUID().GetRawValue();
+
+
+        item->SetNotRefundable(player);
+        player->MoveItemFromInventory(item->GetBagSlot(), item->GetSlot(), true);
+
+        item->DeleteFromInventoryDB(trans);
+        item->SetOwnerGUID(ObjectGuid(assignToPlayerGuid));
+        item->SetState(ITEM_CHANGED);
+        item->SaveToDB(trans);
+
+        delete item;
+    }
+
+    if (itemsFound > 0)
+    {
+        player->SaveInventoryAndGoldToDB(trans);
+        CharacterDatabase.CommitTransaction(trans);
+    }
+
+    uint64_t* itemsResult = (uint64_t*)malloc(sizeof(uint64_t) * itemsFound);
+    int itemsResultsItr = 0;
+    for (int i = 0; i < itemsLen; i++)
+    {
+        if (deletedItems[i] == 0)
+            continue;
+
+
+        itemsResult[itemsResultsItr] = deletedItems[i];
+        itemsResultsItr++;
+    }
+
+    RemoveItemsWithGuidsFromPlayerResponse resp;
+    resp.errorCode = PlayerItemErrorCodeNoError;
+    resp.updatedItems = itemsResult;
+    resp.updatedItemsSize = itemsResultsItr;
+    return resp;
+
+}
+
+PlayerItemErrorCode ToCloud9GrpcHandler::AddExistingItemToPlayer(AddExistingItemToPlayerRequest* request)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(request->playerGuid));
+    if (player == nullptr)
+        return PlayerItemErrorCodePlayerNotFound;
+
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(request->itemEntry);
+    if (proto == nullptr)
+        return PlayerItemErrorUnknownTemplate;
+
+    Item* item = NewItemOrBag(proto);
+    if (!item->Create(ObjectGuid(request->itemGuid).GetCounter(), request->itemEntry, player))
+    {
+        delete item;
+        return PlayerItemErrorFailedToCreateItem;
+    }
+
+    item->SetUInt32Value(ITEM_FIELD_FLAGS, request->itemFlags);
+    item->SetUInt32Value(ITEM_FIELD_DURABILITY, request->itemDurability);
+    item->SetItemRandomProperties(request->itemRandomPropertyID);
+    item->SetCount(request->itemCount);
+
+    // TODO: Add text.
+
+    ItemPosCountVec dest;
+    uint8 msg = player->CanStoreItem(NULL_BAG, NULL_SLOT, dest, item, false);
+    if (msg != EQUIP_ERR_OK)
+    {
+        delete item;
+        return PlayerItemErrorNoInventorySpace;
+    }
+
+    player->MoveItemToInventory(dest, item, true);
+
+    CharacterDatabaseTransaction trans = CharacterDatabase.BeginTransaction();
+    player->SaveInventoryAndGoldToDB(trans);
+    CharacterDatabase.CommitTransaction(trans);
+
+    return PlayerItemErrorCodeNoError;
+}
+
+GetMoneyForPlayerResponse ToCloud9GrpcHandler::GetMoneyForPlayer(uint64 playerGuid)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(playerGuid));
+    if (player == nullptr)
+    {
+        GetMoneyForPlayerResponse resp;
+        resp.errorCode = PlayerMoneyErrorCodePlayerNotFound;
+        return resp;
+    }
+
+    GetMoneyForPlayerResponse resp;
+    resp.errorCode = PlayerMoneyErrorCodeNoError;
+    resp.money = player->GetMoney();
+    return resp;
+}
+
+ModifyMoneyForPlayerResponse ToCloud9GrpcHandler::ModifyMoneyForPlayer(uint64 playerGuid, int32 value)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(playerGuid));
+    if (player == nullptr)
+    {
+        ModifyMoneyForPlayerResponse resp;
+        resp.errorCode = PlayerMoneyErrorCodePlayerNotFound;
+        return resp;
+    }
+
+    if (!player->ModifyMoney(value, true)) {
+        ModifyMoneyForPlayerResponse resp;
+        resp.errorCode = PlayerMoneyErrorCodeToMuchMoney;
+        resp.newMoneyValue = player->GetMoney();
+        return resp;
+    }
+
+    ModifyMoneyForPlayerResponse resp;
+    resp.errorCode = PlayerMoneyErrorCodeNoError;
+    resp.newMoneyValue = player->GetMoney();
+    return resp;
+}
+
+CanPlayerInteractWithGOAndTypeResponse ToCloud9GrpcHandler::CanPlayerInteractWithGOAndType(uint64 playerGuid, uint64 go, uint8 goType)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(playerGuid));
+    if (player == nullptr)
+    {
+        CanPlayerInteractWithGOAndTypeResponse resp;
+        resp.errorCode = PlayerInteractionErrorCodeCodePlayerNotFound;
+        return resp;
+    }
+
+    CanPlayerInteractWithGOAndTypeResponse resp;
+    resp.errorCode = PlayerInteractionErrorCodeNoError;
+    resp.canInteract = player->GetGameObjectIfCanInteractWith(ObjectGuid(go), (GameobjectTypes)goType) != nullptr;
+    return resp;
+}
+
+CanPlayerInteractWithNPCAndFlagsResponse ToCloud9GrpcHandler::CanPlayerInteractWithNPCAndFlags(uint64 playerGuid, uint64 npc, uint32 unitFlags)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(playerGuid));
+    if (player == nullptr)
+    {
+        CanPlayerInteractWithNPCAndFlagsResponse resp;
+        resp.errorCode = PlayerInteractionErrorCodeCodePlayerNotFound;
+        return resp;
+    }
+
+    CanPlayerInteractWithNPCAndFlagsResponse resp;
+    resp.errorCode = PlayerInteractionErrorCodeNoError;
+    resp.canInteract = player->GetNPCIfCanInteractWith(ObjectGuid(npc), (NPCFlags)unitFlags) != nullptr;
+    return resp;
+}
diff --git a/src/server/game/TC9Sidecar/TC9GrpcHandler.h b/src/server/game/TC9Sidecar/TC9GrpcHandler.h
new file mode 100644
index 0000000000..db409b4c42
--- /dev/null
+++ b/src/server/game/TC9Sidecar/TC9GrpcHandler.h
@@ -0,0 +1,29 @@
+#ifndef _TC9_GRPC_HANDLER_H
+#define _TC9_GRPC_HANDLER_H
+
+#include "Common.h"
+#include "libsidecar.h"
+
+class ToCloud9GrpcHandler
+{
+public:
+    ToCloud9GrpcHandler() {};
+    ~ToCloud9GrpcHandler() {};
+
+    // Items
+    static GetPlayerItemsByGuidsResponse          GetPlayerItemsByGuids(uint64 player, uint64* items, int items_len);
+    static RemoveItemsWithGuidsFromPlayerResponse RemoveItemsWithGuidsFromPlayer(uint64 player, uint64* items, int itemsLen, uint64 assignToPlayer);
+    static PlayerItemErrorCode                    AddExistingItemToPlayer(AddExistingItemToPlayerRequest*);
+
+    // Money
+    static GetMoneyForPlayerResponse    GetMoneyForPlayer(uint64 player);
+    static ModifyMoneyForPlayerResponse ModifyMoneyForPlayer(uint64 player, int32 value);
+
+    // Interactions
+    static CanPlayerInteractWithGOAndTypeResponse   CanPlayerInteractWithGOAndType(uint64 player, uint64 go, uint8 goType);
+    static CanPlayerInteractWithNPCAndFlagsResponse CanPlayerInteractWithNPCAndFlags(uint64 player, uint64 npc, uint32 unitFlags);
+};
+
+
+
+#endif // _TC9_GRPC_HANDLER_H
diff --git a/src/server/game/TC9Sidecar/TC9GuildHooks.cpp b/src/server/game/TC9Sidecar/TC9GuildHooks.cpp
new file mode 100644
index 0000000000..48f287b2da
--- /dev/null
+++ b/src/server/game/TC9Sidecar/TC9GuildHooks.cpp
@@ -0,0 +1,31 @@
+#include "TC9GuildHooks.h"
+#include "ObjectAccessor.h"
+
+
+void ToCloud9GuildHooks::OnGuildMemberAdded(uint64 guild, uint64 character)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(character));
+    if (player == NULL)
+        return;
+
+    player->SetInGuild(guild);
+}
+
+void ToCloud9GuildHooks::OnGuildMemberRemoved(uint64 guild, uint64 character)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(character));
+    if (player == NULL)
+        return;
+
+    player->SetInGuild(0);
+}
+
+void ToCloud9GuildHooks::OnGuildMemberLeft(uint64 guild, uint64 character)
+{
+    Player *player = ObjectAccessor::FindPlayer(ObjectGuid(character));
+    if (player == NULL)
+        return;
+
+    player->SetInGuild(0);
+}
+
diff --git a/src/server/game/TC9Sidecar/TC9GuildHooks.h b/src/server/game/TC9Sidecar/TC9GuildHooks.h
new file mode 100644
index 0000000000..ccd5bee0e6
--- /dev/null
+++ b/src/server/game/TC9Sidecar/TC9GuildHooks.h
@@ -0,0 +1,18 @@
+#ifndef _TC9_GUILD_HOOKS_H
+#define _TC9_GUILD_HOOKS_H
+
+#include "Common.h"
+
+class ToCloud9GuildHooks
+{
+public:
+    ToCloud9GuildHooks() {};
+    ~ToCloud9GuildHooks() {};
+
+    static void OnGuildMemberAdded(uint64 guild, uint64 character);
+    static void OnGuildMemberRemoved(uint64 guild, uint64 character);
+    static void OnGuildMemberLeft(uint64 guild, uint64 character);
+};
+
+
+#endif // _TC9_GUILD_HOOKS_H
diff --git a/src/server/game/TC9Sidecar/TC9Sidecar.cpp b/src/server/game/TC9Sidecar/TC9Sidecar.cpp
new file mode 100644
index 0000000000..aa2d1f2168
--- /dev/null
+++ b/src/server/game/TC9Sidecar/TC9Sidecar.cpp
@@ -0,0 +1,48 @@
+#include "TC9Sidecar.h"
+#include "libsidecar.h"
+
+ToCloud9Sidecar* ToCloud9Sidecar::instance()
+{
+    static ToCloud9Sidecar instance;
+    return &instance;
+}
+
+void ToCloud9Sidecar::SetupHooks()
+{
+    TC9SetOnGuildMemberAddedHook(&ToCloud9GuildHooks::OnGuildMemberAdded);
+    TC9SetOnGuildMemberLeftHook(&ToCloud9GuildHooks::OnGuildMemberLeft);
+    TC9SetOnGuildMemberRemovedHook(&ToCloud9GuildHooks::OnGuildMemberRemoved);
+}
+
+void ToCloud9Sidecar::SetupGrpcHandlers()
+{
+    TC9SetGetPlayerItemsByGuidsHandler(&ToCloud9GrpcHandler::GetPlayerItemsByGuids);
+    TC9SetRemoveItemsWithGuidsFromPlayerHandler(&ToCloud9GrpcHandler::RemoveItemsWithGuidsFromPlayer);
+    TC9SetAddExistingItemToPlayerHandler(&ToCloud9GrpcHandler::AddExistingItemToPlayer);
+
+    TC9SetGetMoneyForPlayerHandler(&ToCloud9GrpcHandler::GetMoneyForPlayer);
+    TC9SetModifyMoneyForPlayerHandler(&ToCloud9GrpcHandler::ModifyMoneyForPlayer);
+
+    TC9SetCanPlayerInteractWithGOAndTypeHandler(&ToCloud9GrpcHandler::CanPlayerInteractWithGOAndType);
+    TC9SetCanPlayerInteractWithNPCAndFlagsHandler(&ToCloud9GrpcHandler::CanPlayerInteractWithNPCAndFlags);
+}
+
+void ToCloud9Sidecar::ProcessHooks()
+{
+    TC9ProcessEventsHooks();
+}
+
+void ToCloud9Sidecar::ProcessGrpcRequests()
+{
+    TC9ProcessGRPCRequests();
+}
+
+uint32 ToCloud9Sidecar::GenerateCharacterGuid()
+{
+    return ObjectGuid::LowType(TC9GetNextAvailableCharacterGuid());
+}
+
+uint32 ToCloud9Sidecar::GenerateItemGuid()
+{
+    return ObjectGuid::LowType(TC9GetNextAvailableItemGuid());
+}
diff --git a/src/server/game/TC9Sidecar/TC9Sidecar.h b/src/server/game/TC9Sidecar/TC9Sidecar.h
new file mode 100644
index 0000000000..418184dfcb
--- /dev/null
+++ b/src/server/game/TC9Sidecar/TC9Sidecar.h
@@ -0,0 +1,29 @@
+#ifndef _TC9_SIDECAR_H
+#define _TC9_SIDECAR_H
+
+#include "Common.h"
+#include "TC9GuildHooks.h"
+#include "TC9GrpcHandler.h"
+
+class ToCloud9Sidecar
+{
+private:
+    ToCloud9Sidecar() {};
+    ~ToCloud9Sidecar() {};
+
+public:
+    static ToCloud9Sidecar* instance();
+
+    void SetupHooks();
+    void SetupGrpcHandlers();
+
+    void ProcessHooks();
+    void ProcessGrpcRequests();
+
+    uint32 GenerateCharacterGuid();
+    uint32 GenerateItemGuid();
+};
+
+#define sToCloud9Sidecar ToCloud9Sidecar::instance()
+
+#endif // _TC9_SIDECAR_H
diff --git a/src/server/game/World/World.cpp b/src/server/game/World/World.cpp
index ed38d2505e..835613f365 100644
--- a/src/server/game/World/World.cpp
+++ b/src/server/game/World/World.cpp
@@ -88,6 +88,7 @@
 #include "WeatherMgr.h"
 #include "WhoListStorage.h"
 #include "WorldSession.h"
+#include "TC9Sidecar.h"

 #include <boost/asio/ip/address.hpp>

@@ -1599,6 +1600,9 @@ void World::SetInitialWorldSettings()

     ///- Initialize game event manager
     sGameEventMgr->Initialize();
+
+    sToCloud9Sidecar->SetupHooks();
+    sToCloud9Sidecar->SetupGrpcHandlers();

     ///- Loading strings. Getting no records means core load has to be canceled because no error message can be output.

@@ -1979,8 +1983,8 @@ void World::SetInitialWorldSettings()
     TC_LOG_INFO("server.loading", "Loading Auctions...");
     sAuctionMgr->LoadAuctions();

-    TC_LOG_INFO("server.loading", "Loading Guilds...");
-    sGuildMgr->LoadGuilds();
+//    TC_LOG_INFO("server.loading", "Loading Guilds...");
+//    sGuildMgr->LoadGuilds();

     TC_LOG_INFO("server.loading", "Loading ArenaTeams...");
     sArenaTeamMgr->LoadArenaTeams();
@@ -2380,13 +2384,13 @@ void World::Update(uint32 diff)
         TC_METRIC_TIMER("world_update_time", TC_METRIC_TAG("type", "Update expired auctions"));
         m_timers[WUPDATE_AUCTIONS].Reset();

-        ///- Update mails (return old mails with item, or delete them)
-        //(tested... works on win)
-        if (++mail_timer > mail_timer_expires)
-        {
-            mail_timer = 0;
-            sObjectMgr->ReturnOrDeleteOldMails(true);
-        }
+//        ///- Update mails (return old mails with item, or delete them)
+//        //(tested... works on win)
+//        if (++mail_timer > mail_timer_expires)
+//        {
+//            mail_timer = 0;
+//            sObjectMgr->ReturnOrDeleteOldMails(true);
+//        }

         ///- Handle expired auctions
         sAuctionMgr->Update();
@@ -2573,6 +2577,16 @@ void World::Update(uint32 diff)
         TC_METRIC_TIMER("world_update_time", TC_METRIC_TAG("type", "Update world scripts"));
         sScriptMgr->OnWorldUpdate(diff);
     }
+
+    {
+        TC_METRIC_TIMER("world_update_time", TC_METRIC_TAG("type", "Process TC9 hooks"));
+        sToCloud9Sidecar->ProcessHooks();
+    }
+
+    {
+        TC_METRIC_TIMER("world_update_time", TC_METRIC_TAG("type", "Process TC9 grpc requests"));
+        sToCloud9Sidecar->ProcessGrpcRequests();
+    }

     {
         TC_METRIC_TIMER("world_update_time", TC_METRIC_TAG("type", "Update metrics"));
diff --git a/src/server/scripts/CMakeLists.txt b/src/server/scripts/CMakeLists.txt
index 319aafaec9..b79ab82e1c 100644
--- a/src/server/scripts/CMakeLists.txt
+++ b/src/server/scripts/CMakeLists.txt
@@ -225,6 +225,7 @@ set_target_properties(scripts

 # Generate precompiled header
 if(USE_SCRIPTPCH)
+  include_directories(${CMAKE_SOURCE_DIR}/dep/libsidecar/include/)
   list(APPEND ALL_SCRIPT_PROJECTS scripts ${DYNAMIC_SCRIPT_MODULE_PROJECTS})
   add_cxx_pch("${ALL_SCRIPT_PROJECTS}" ${PRIVATE_PCH_HEADER})
 endif()
diff --git a/src/server/worldserver/CMakeLists.txt b/src/server/worldserver/CMakeLists.txt
index f67a7a5b7f..cdb60fa6a2 100644
--- a/src/server/worldserver/CMakeLists.txt
+++ b/src/server/worldserver/CMakeLists.txt
@@ -51,7 +51,8 @@ target_link_libraries(worldserver
     scripts
     game
     gsoap
-    readline)
+    readline
+    sidecar)

 CollectIncludeDirectories(
   ${CMAKE_CURRENT_SOURCE_DIR}
@@ -103,5 +104,6 @@ endif()

 # Generate precompiled header
 if(USE_COREPCH)
+  include_directories(${CMAKE_SOURCE_DIR}/dep/libsidecar/include/)
   add_cxx_pch(worldserver ${PRIVATE_PCH_HEADER})
 endif()
diff --git a/src/server/worldserver/Main.cpp b/src/server/worldserver/Main.cpp
index 9f601f8ceb..49e17fac40 100644
--- a/src/server/worldserver/Main.cpp
+++ b/src/server/worldserver/Main.cpp
@@ -61,6 +61,7 @@
 #include <boost/program_options.hpp>
 #include <csignal>
 #include <iostream>
+#include "libsidecar.h"

 using namespace boost::program_options;
 namespace fs = boost::filesystem;
@@ -386,6 +387,9 @@ extern int main(int argc, char** argv)
         cliThread.reset(new std::thread(CliThread), &ShutdownCLIThread);
     }

+    std::string availableMaps = sConfigMgr->GetStringDefault("Cluster.AvailableMaps", ""); // Empty string means all maps.
+    TC9InitLib(worldPort, realm.Id.Realm, availableMaps.data());
+
     WorldUpdateLoop();

     // Shutdown starts here
@@ -393,6 +397,8 @@ extern int main(int argc, char** argv)

     threadPool.reset();

+    TC9GracefulShutdown();
+
     sLog->SetSynchronous();

     sScriptMgr->OnShutdown();
diff --git a/src/server/worldserver/worldserver.conf.dist b/src/server/worldserver/worldserver.conf.dist
index 90ad17d318..b4f5c12cd8 100644
--- a/src/server/worldserver/worldserver.conf.dist
+++ b/src/server/worldserver/worldserver.conf.dist
@@ -4095,6 +4095,21 @@ AntiCheat.PendingMoveChangesTimeoutTime = 0
 #
 ###################################################################################################

+###################################################################################################
+# CLUSTER SETTINGS
+#
+# These settings control configuration of server inside of the servers cluster.
+#
+#    Cluster.AvailableMaps
+#        Description: List of available maps id on this server.
+#        Examples:    "" - (Can handle any map)
+#                     "0,1,573"
+
+Cluster.AvailableMaps=""
+
+#
+###################################################################################################
+
 ###################################################################################################
 # METRIC SETTINGS
 #
