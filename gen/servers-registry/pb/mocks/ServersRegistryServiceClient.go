// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/walkline/ToCloud9/gen/servers-registry/pb"
)

// ServersRegistryServiceClient is an autogenerated mock type for the ServersRegistryServiceClient type
type ServersRegistryServiceClient struct {
	mock.Mock
}

// AvailableGameServersForMapAndRealm provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) AvailableGameServersForMapAndRealm(ctx context.Context, in *pb.AvailableGameServersForMapAndRealmRequest, opts ...grpc.CallOption) (*pb.AvailableGameServersForMapAndRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AvailableGameServersForMapAndRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AvailableGameServersForMapAndRealmRequest, ...grpc.CallOption) (*pb.AvailableGameServersForMapAndRealmResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AvailableGameServersForMapAndRealmRequest, ...grpc.CallOption) *pb.AvailableGameServersForMapAndRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AvailableGameServersForMapAndRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.AvailableGameServersForMapAndRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameServerMapsLoaded provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) GameServerMapsLoaded(ctx context.Context, in *pb.GameServerMapsLoadedRequest, opts ...grpc.CallOption) (*pb.GameServerMapsLoadedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GameServerMapsLoadedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GameServerMapsLoadedRequest, ...grpc.CallOption) (*pb.GameServerMapsLoadedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GameServerMapsLoadedRequest, ...grpc.CallOption) *pb.GameServerMapsLoadedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GameServerMapsLoadedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GameServerMapsLoadedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGameServersForRealm provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) ListGameServersForRealm(ctx context.Context, in *pb.ListGameServersForRealmRequest, opts ...grpc.CallOption) (*pb.ListGameServersForRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ListGameServersForRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListGameServersForRealmRequest, ...grpc.CallOption) (*pb.ListGameServersForRealmResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListGameServersForRealmRequest, ...grpc.CallOption) *pb.ListGameServersForRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListGameServersForRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListGameServersForRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoadBalancersForRealm provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) ListLoadBalancersForRealm(ctx context.Context, in *pb.ListLoadBalancersForRealmRequest, opts ...grpc.CallOption) (*pb.ListLoadBalancersForRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ListLoadBalancersForRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListLoadBalancersForRealmRequest, ...grpc.CallOption) (*pb.ListLoadBalancersForRealmResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListLoadBalancersForRealmRequest, ...grpc.CallOption) *pb.ListLoadBalancersForRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListLoadBalancersForRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListLoadBalancersForRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadBalancerForRealms provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) LoadBalancerForRealms(ctx context.Context, in *pb.LoadBalancerForRealmsRequest, opts ...grpc.CallOption) (*pb.LoadBalancerForRealmsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.LoadBalancerForRealmsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoadBalancerForRealmsRequest, ...grpc.CallOption) (*pb.LoadBalancerForRealmsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoadBalancerForRealmsRequest, ...grpc.CallOption) *pb.LoadBalancerForRealmsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoadBalancerForRealmsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoadBalancerForRealmsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RandomGameServerForRealm provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) RandomGameServerForRealm(ctx context.Context, in *pb.RandomGameServerForRealmRequest, opts ...grpc.CallOption) (*pb.RandomGameServerForRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.RandomGameServerForRealmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RandomGameServerForRealmRequest, ...grpc.CallOption) (*pb.RandomGameServerForRealmResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RandomGameServerForRealmRequest, ...grpc.CallOption) *pb.RandomGameServerForRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RandomGameServerForRealmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.RandomGameServerForRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterGameServer provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) RegisterGameServer(ctx context.Context, in *pb.RegisterGameServerRequest, opts ...grpc.CallOption) (*pb.RegisterGameServerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.RegisterGameServerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RegisterGameServerRequest, ...grpc.CallOption) (*pb.RegisterGameServerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RegisterGameServerRequest, ...grpc.CallOption) *pb.RegisterGameServerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RegisterGameServerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.RegisterGameServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterLoadBalancer provides a mock function with given fields: ctx, in, opts
func (_m *ServersRegistryServiceClient) RegisterLoadBalancer(ctx context.Context, in *pb.RegisterLoadBalancerRequest, opts ...grpc.CallOption) (*pb.RegisterLoadBalancerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.RegisterLoadBalancerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RegisterLoadBalancerRequest, ...grpc.CallOption) (*pb.RegisterLoadBalancerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RegisterLoadBalancerRequest, ...grpc.CallOption) *pb.RegisterLoadBalancerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RegisterLoadBalancerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.RegisterLoadBalancerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServersRegistryServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewServersRegistryServiceClient creates a new instance of ServersRegistryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServersRegistryServiceClient(t mockConstructorTestingTNewServersRegistryServiceClient) *ServersRegistryServiceClient {
	mock := &ServersRegistryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
