// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repo "github.com/walkline/ToCloud9/apps/guildserver/repo"
)

// GuildsRepo is an autogenerated mock type for the GuildsRepo type
type GuildsRepo struct {
	mock.Mock
}

// AddGuildInvite provides a mock function with given fields: ctx, realmID, charGUID, guildID
func (_m *GuildsRepo) AddGuildInvite(ctx context.Context, realmID uint32, charGUID uint64, guildID uint64) error {
	ret := _m.Called(ctx, realmID, charGUID, guildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, uint64) error); ok {
		r0 = rf(ctx, realmID, charGUID, guildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGuildMember provides a mock function with given fields: ctx, realmID, member
func (_m *GuildsRepo) AddGuildMember(ctx context.Context, realmID uint32, member repo.GuildMember) error {
	ret := _m.Called(ctx, realmID, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, repo.GuildMember) error); ok {
		r0 = rf(ctx, realmID, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGuildRank provides a mock function with given fields: ctx, realmID, guildID, rank, name, rights, moneyPerDay
func (_m *GuildsRepo) AddGuildRank(ctx context.Context, realmID uint32, guildID uint64, rank uint8, name string, rights uint32, moneyPerDay uint32) error {
	ret := _m.Called(ctx, realmID, guildID, rank, name, rights, moneyPerDay)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, uint8, string, uint32, uint32) error); ok {
		r0 = rf(ctx, realmID, guildID, rank, name, rights, moneyPerDay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLowestGuildRank provides a mock function with given fields: ctx, realmID, guildID, rank
func (_m *GuildsRepo) DeleteLowestGuildRank(ctx context.Context, realmID uint32, guildID uint64, rank uint8) error {
	ret := _m.Called(ctx, realmID, guildID, rank)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, uint8) error); ok {
		r0 = rf(ctx, realmID, guildID, rank)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GuildByRealmAndID provides a mock function with given fields: ctx, realmID, guildID
func (_m *GuildsRepo) GuildByRealmAndID(ctx context.Context, realmID uint32, guildID uint64) (*repo.Guild, error) {
	ret := _m.Called(ctx, realmID, guildID)

	var r0 *repo.Guild
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) (*repo.Guild, error)); ok {
		return rf(ctx, realmID, guildID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) *repo.Guild); ok {
		r0 = rf(ctx, realmID, guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repo.Guild)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint64) error); ok {
		r1 = rf(ctx, realmID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildIDByCharInvite provides a mock function with given fields: ctx, realmID, charGUID
func (_m *GuildsRepo) GuildIDByCharInvite(ctx context.Context, realmID uint32, charGUID uint64) (uint64, error) {
	ret := _m.Called(ctx, realmID, charGUID)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) (uint64, error)); ok {
		return rf(ctx, realmID, charGUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) uint64); ok {
		r0 = rf(ctx, realmID, charGUID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint64) error); ok {
		r1 = rf(ctx, realmID, charGUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuildIDByRealmAndMemberGUID provides a mock function with given fields: ctx, realmID, memberGUID
func (_m *GuildsRepo) GuildIDByRealmAndMemberGUID(ctx context.Context, realmID uint32, memberGUID uint64) (uint64, error) {
	ret := _m.Called(ctx, realmID, memberGUID)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) (uint64, error)); ok {
		return rf(ctx, realmID, memberGUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) uint64); ok {
		r0 = rf(ctx, realmID, memberGUID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint64) error); ok {
		r1 = rf(ctx, realmID, memberGUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAllForRealm provides a mock function with given fields: ctx, realmID
func (_m *GuildsRepo) LoadAllForRealm(ctx context.Context, realmID uint32) (map[uint64]*repo.Guild, error) {
	ret := _m.Called(ctx, realmID)

	var r0 map[uint64]*repo.Guild
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (map[uint64]*repo.Guild, error)); ok {
		return rf(ctx, realmID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) map[uint64]*repo.Guild); ok {
		r0 = rf(ctx, realmID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]*repo.Guild)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, realmID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveGuildInviteForCharacter provides a mock function with given fields: ctx, realmID, charGUID
func (_m *GuildsRepo) RemoveGuildInviteForCharacter(ctx context.Context, realmID uint32, charGUID uint64) error {
	ret := _m.Called(ctx, realmID, charGUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) error); ok {
		r0 = rf(ctx, realmID, charGUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveGuildMember provides a mock function with given fields: ctx, realmID, characterGUID
func (_m *GuildsRepo) RemoveGuildMember(ctx context.Context, realmID uint32, characterGUID uint64) error {
	ret := _m.Called(ctx, realmID, characterGUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) error); ok {
		r0 = rf(ctx, realmID, characterGUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGuildInfo provides a mock function with given fields: ctx, realmID, guildID, info
func (_m *GuildsRepo) SetGuildInfo(ctx context.Context, realmID uint32, guildID uint64, info string) error {
	ret := _m.Called(ctx, realmID, guildID, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, string) error); ok {
		r0 = rf(ctx, realmID, guildID, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMemberOfficerNote provides a mock function with given fields: ctx, realmID, memberGUID, note
func (_m *GuildsRepo) SetMemberOfficerNote(ctx context.Context, realmID uint32, memberGUID uint64, note string) error {
	ret := _m.Called(ctx, realmID, memberGUID, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, string) error); ok {
		r0 = rf(ctx, realmID, memberGUID, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMemberPublicNote provides a mock function with given fields: ctx, realmID, memberGUID, note
func (_m *GuildsRepo) SetMemberPublicNote(ctx context.Context, realmID uint32, memberGUID uint64, note string) error {
	ret := _m.Called(ctx, realmID, memberGUID, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, string) error); ok {
		r0 = rf(ctx, realmID, memberGUID, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMemberRank provides a mock function with given fields: ctx, realmID, memberGUID, rank
func (_m *GuildsRepo) SetMemberRank(ctx context.Context, realmID uint32, memberGUID uint64, rank uint8) error {
	ret := _m.Called(ctx, realmID, memberGUID, rank)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, uint8) error); ok {
		r0 = rf(ctx, realmID, memberGUID, rank)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMessageOfTheDay provides a mock function with given fields: ctx, realmID, guildID, message
func (_m *GuildsRepo) SetMessageOfTheDay(ctx context.Context, realmID uint32, guildID uint64, message string) error {
	ret := _m.Called(ctx, realmID, guildID, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, string) error); ok {
		r0 = rf(ctx, realmID, guildID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGuildRank provides a mock function with given fields: ctx, realmID, guildID, rank, name, rights, moneyPerDay
func (_m *GuildsRepo) UpdateGuildRank(ctx context.Context, realmID uint32, guildID uint64, rank uint8, name string, rights uint32, moneyPerDay uint32) error {
	ret := _m.Called(ctx, realmID, guildID, rank, name, rights, moneyPerDay)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, uint8, string, uint32, uint32) error); ok {
		r0 = rf(ctx, realmID, guildID, rank, name, rights, moneyPerDay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGuildsRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewGuildsRepo creates a new instance of GuildsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGuildsRepo(t mockConstructorTestingTNewGuildsRepo) *GuildsRepo {
	mock := &GuildsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
